const { User, Role } = require("../models");
const sequelize = require("../config/database");

const migrateRolesSoft = async () => {
  try {
    console.log("üîÑ ƒêang migrate roles m·ªôt c√°ch nh·∫π nh√†ng...");

    // 1. T·∫°o b·∫£ng roles n·∫øu ch∆∞a c√≥
    await Role.sync();
    console.log("‚úÖ B·∫£ng roles ƒë√£ s·∫µn s√†ng");

    // 2. ƒê·∫£m b·∫£o c√≥ ƒë·ªß roles c∆° b·∫£n TR∆Ø·ªöC KHI t·∫°o foreign key
    const defaultRoles = [
      {
        id: 1,
        name: "User",
        description: "Regular user",
        permissions: JSON.stringify({}),
        is_active: true,
      },
      {
        id: 2,
        name: "Admin",
        description: "Administrator",
        permissions: JSON.stringify({}),
        is_active: true,
      },
      {
        id: 3,
        name: "Marketer",
        description: "Marketing user",
        permissions: JSON.stringify({}),
        is_active: true,
      },
    ];

    for (const roleData of defaultRoles) {
      try {
        await Role.findOrCreate({
          where: { id: roleData.id },
          defaults: roleData,
        });
      } catch (error) {
        console.log(
          `‚ÑπÔ∏è Role ${roleData.name} ƒë√£ t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói:`,
          error.message
        );
      }
    }
    console.log("‚úÖ ƒê√£ ƒë·∫£m b·∫£o c√≥ ƒë·ªß roles c∆° b·∫£n");

    // 3. Th√™m c·ªôt role_id n·∫øu ch∆∞a c√≥ (kh√¥ng x√≥a c·ªôt role c≈©)
    try {
      await sequelize.query(`
        ALTER TABLE users 
        ADD COLUMN role_id INT NULL
      `);
      console.log("‚úÖ ƒê√£ th√™m c·ªôt role_id");
    } catch (error) {
      if (error.message.includes("Duplicate column name")) {
        console.log("‚ÑπÔ∏è C·ªôt role_id ƒë√£ t·ªìn t·∫°i");
      } else {
        throw error;
      }
    }

    // 4. C·∫≠p nh·∫≠t role_id cho users hi·ªán c√≥ TR∆Ø·ªöC KHI t·∫°o foreign key
    const updateResult = await sequelize.query(`
      UPDATE users 
      SET role_id = role 
      WHERE role_id IS NULL
    `);
    console.log(
      `‚úÖ ƒê√£ c·∫≠p nh·∫≠t role_id cho ${updateResult[0].affectedRows} users`
    );

    // 5. Th√™m foreign key constraint SAU KHI ƒë√£ c√≥ d·ªØ li·ªáu
    try {
      await sequelize.query(`
        ALTER TABLE users 
        ADD CONSTRAINT fk_user_role 
        FOREIGN KEY (role_id) REFERENCES roles(id) 
        ON DELETE SET NULL
      `);
      console.log("‚úÖ ƒê√£ th√™m foreign key constraint");
    } catch (error) {
      if (error.message.includes("Duplicate key name")) {
        console.log("‚ÑπÔ∏è Foreign key constraint ƒë√£ t·ªìn t·∫°i");
      } else {
        console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m foreign key constraint:", error.message);
      }
    }

    // 6. Hi·ªÉn th·ªã th·ªëng k√™
    const userStats = await sequelize.query(`
      SELECT 
        role,
        role_id,
        COUNT(*) as count
      FROM users 
      GROUP BY role, role_id
    `);

    console.log("\nüìä Th·ªëng k√™ users theo role:");
    userStats[0].forEach((stat) => {
      console.log(
        `  - Role: ${stat.role}, Role ID: ${stat.role_id}, Count: ${stat.count}`
      );
    });

    // 7. Ki·ªÉm tra roles trong b·∫£ng roles
    const roles = await Role.findAll();
    console.log("\nüéØ Roles hi·ªán c√≥:");
    roles.forEach((role) => {
      console.log(
        `  - ID: ${role.id}, Name: ${role.name}, Active: ${role.is_active}`
      );
    });

    console.log("\nüéâ Migration nh·∫π nh√†ng ho√†n th√†nh!");
    console.log("‚úÖ T·∫•t c·∫£ d·ªØ li·ªáu c≈© v·∫´n ƒë∆∞·ª£c b·∫£o to√†n");
    console.log("‚úÖ C√≥ th·ªÉ s·ª≠ d·ª•ng c·∫£ role c≈© v√† role_id m·ªõi");
  } catch (error) {
    console.error("‚ùå L·ªói migration:", error);
    throw error;
  }
};

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  migrateRolesSoft()
    .then(() => {
      console.log("‚úÖ Script migration ho√†n th√†nh");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Script migration th·∫•t b·∫°i:", error);
      process.exit(1);
    });
}

module.exports = { migrateRolesSoft };
