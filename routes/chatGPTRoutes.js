const express = require("express");
const router = express.Router();
const axios = require("axios");
const User = require("../models/User"); // Kh√¥ng destructure
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const { authMiddleware, adminMiddleware } = require('../middleware/authMiddleware');

// H√†m g·ªçi OpenAI API v·ªõi model v√† prompt t√πy ch·ªçn
async function callGPT(userPrompt, model = "gpt-4o-mini", language = "en") {
    if (!OPENAI_API_KEY) {
        throw new Error("üö® API Key ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!");
    }

    const systemPrompts = {
        vi: `B·∫°n l√† m·ªôt tr·ª£ l√Ω chuy√™n nghi·ªáp tr√™n prom.vn. Lu√¥n tr·∫£ l·ªùi r√µ r√†ng, d·ªÖ hi·ªÉu, chuy√™n nghi·ªáp. K√®m theo m·ªói c√¢u tr·∫£ l·ªùi, h√£y cung c·∫•p m·∫πo ho·∫∑c g·ª£i √Ω c√≥ th·ªÉ √°p d·ª•ng ngay. Lu√¥n ƒë·∫∑t 1‚Äì2 c√¢u h·ªèi follow-up li√™n quan tr·ª±c ti·∫øp ƒë·ªÉ khai th√°c nhu c·∫ßu th·ª±c s·ª± c·ªßa ng∆∞·ªùi d√πng. N·∫øu c√≥ th√¥ng tin ch∆∞a ch·∫Øc ch·∫Øn, h√£y c·∫£nh b√°o r√µ r√†ng. Tr√°nh v√≤ng vo, kh√¥ng ƒë∆∞a th√¥ng tin d∆∞ th·ª´a. Gi·ªØ gi·ªçng ƒëi·ªáu l·ªãch thi·ªáp, t√¥n tr·ªçng, kh√¥ng d√πng bi·ªát ng·ªØ g√¢y kh√≥ hi·ªÉu.`,
        en: `You are a professional assistant on prom.vn. Always respond clearly, understandably, and professionally. Include a practical tip or suggestion with each response. Always ask 1‚Äì2 follow-up questions directly related to uncover the user's true needs. If information is uncertain, clearly warn about it. Avoid being vague or redundant. Maintain a polite and respectful tone, and avoid jargon that may confuse the user.`
    };

    const languageGuides = {
        vi: "H√£y tr·∫£ l·ªùi to√†n b·ªô b·∫±ng ti·∫øng Vi·ªát.",
        en: "Please respond entirely in English."
    };

    let attempts = 0;
    const maxAttempts = 5;

    const messages = [
        {
            role: "system",
            content: systemPrompts[language] || systemPrompts.en
        },
        {
            role: "system",
            content: languageGuides[language] || languageGuides.en
        },
        {
            role: "user",
            content: userPrompt
        }
    ];

    while (attempts < maxAttempts) {
        try {
            const response = await axios.post(
                "https://api.openai.com/v1/chat/completions",
                {
                    model,
                    messages
                },
                {
                    headers: {
                        "Authorization": `Bearer ${OPENAI_API_KEY}`,
                        "Content-Type": "application/json",
                    },
                }
            );
            return response.data.choices[0].message.content;
        } catch (error) {
            if (error.response) {
                const status = error.response.status;
                if (status === 429) {
                    console.warn(`‚ö†Ô∏è Qu√° nhi·ªÅu request! ƒêang th·ª≠ l·∫°i... (${attempts + 1}/${maxAttempts})`);
                    await delay(2000 * (attempts + 1));
                    attempts++;
                } else {
                    console.error(`‚ùå OpenAI API l·ªói: ${status} -`, error.response.data);
                    throw new Error(`L·ªói OpenAI API: ${error.response.data.error.message || "Kh√¥ng x√°c ƒë·ªãnh"}`);
                }
            } else {
                console.error("‚ùå L·ªói k·∫øt n·ªëi OpenAI API:", error.message);
                throw new Error("L·ªói k·∫øt n·ªëi API OpenAI");
            }
        }
    }

    throw new Error("üö® Kh√¥ng th·ªÉ g·ªçi OpenAI API sau nhi·ªÅu l·∫ßn th·ª≠!");
}

function delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

router.post("/gpt", authMiddleware, async (req, res) => {
    try {
        const { userPrompt, model, language, id } = req.body;

        if (!userPrompt) {
            return res.status(400).json({ error: "Thi·∫øu userPrompt trong y√™u c·∫ßu!" });
        }

        const userId = req.user.id;
        const user = await User.findByPk(userId);
        console.log(user)
        if (!user) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
        }

        if (user.count_promt <= 0) {
            return res.status(403).json({ error: "H·∫øt l∆∞·ª£t s·ª≠ d·ª•ng GPT." });
        }

        // G·ªçi API GPT
        const result = await callGPT(userPrompt, model, language);

        // Ch·ªâ tr·ª´ count_prompt khi API call th√†nh c√¥ng
        // Ch·ªâ tr·ª´ count_prompt khi API call th√†nh c√¥ng
        let cost = 1;
        if (model === "gpt-4.1" || model === "gpt-4o") {
            cost = 5;
        }
        user.count_promt -= cost;
        await user.save();

        res.json({ result, count: user.count_promt });
    } catch (error) {
        console.error("üö® L·ªói server:", error.message);
        res.status(500).json({ error: error.message || "L·ªói server" });
    }
});

module.exports = router;