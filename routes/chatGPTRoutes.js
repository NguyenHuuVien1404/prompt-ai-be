const express = require("express");
const router = express.Router();
const axios = require("axios");
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
// H√†m g·ªçi OpenAI API v·ªõi c∆° ch·∫ø retry
async function callGPT(userPrompt) {
    if (!OPENAI_API_KEY) {
        throw new Error("üö® API Key ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!");
    }

    let attempts = 0;
    const maxAttempts = 5; // Th·ª≠ l·∫°i t·ªëi ƒëa 5 l·∫ßn

    while (attempts < maxAttempts) {
        try {
            const response = await axios.post(
                "https://api.openai.com/v1/chat/completions",
                {
                    model: "gpt-4o-mini", // C√≥ th·ªÉ ƒë·ªïi sang "gpt-3.5-turbo" n·∫øu mu·ªën r·∫ª h∆°n
                    messages: [{ role: "user", content: userPrompt }],
                },
                {
                    headers: {
                        "Authorization": `Bearer ${OPENAI_API_KEY}`,
                        "Content-Type": "application/json",
                    },
                }
            );
            return response.data.choices[0].message.content;
        } catch (error) {
            if (error.response) {
                const status = error.response.status;

                if (status === 429) {
                    console.warn(`‚ö†Ô∏è Qu√° nhi·ªÅu request! ƒêang th·ª≠ l·∫°i... (${attempts + 1}/${maxAttempts})`);
                    await delay(2000 * (attempts + 1)); // TƒÉng th·ªùi gian ch·ªù m·ªói l·∫ßn th·ª≠
                    attempts++;
                } else {
                    console.error(`‚ùå OpenAI API l·ªói: ${status} -`, error.response.data);
                    throw new Error(`L·ªói OpenAI API: ${error.response.data.error.message || "Kh√¥ng x√°c ƒë·ªãnh"}`);
                }
            } else {
                console.error("‚ùå L·ªói k·∫øt n·ªëi OpenAI API:", error.message);
                throw new Error("L·ªói k·∫øt n·ªëi API OpenAI");
            }
        }
    }

    throw new Error("üö® Kh√¥ng th·ªÉ g·ªçi OpenAI API sau nhi·ªÅu l·∫ßn th·ª≠!");
}

router.post("/gpt", async (req, res) => {
    try {
        const { userPrompt } = req.body;
        if (!userPrompt) {
            return res.status(400).json({ error: "Thi·∫øu userPrompt trong y√™u c·∫ßu!" });
        }

        const result = await callGPT(userPrompt);
        res.json({ result });
    } catch (error) {
        console.error("üö® L·ªói server:", error.message);
        res.status(500).json({ error: error.message || "L·ªói server" });
    }
});
module.exports = router;